---
import React from '../icons/React.astro';
import Photoshop from '../icons/Photoshop.astro';
import Premier from '../icons/Premier.astro';
import Dmax from '../icons/Dmax.astro';
import Aftere from '../icons/Aftere.astro';
import Spoti from '../icons/Spoti.astro';
import HTM5 from '../icons/HTM5.astro';
import Javasci from '../icons/Javasci.astro';
import Cs3 from '../icons/Cs3.astro';
import Unity from '../icons/Unity.astro';
import Cc from '../icons/Cc.astro';
import Mongoo from '../icons/Mongoo.astro';
import Nodee from '../icons/Nodee.astro';
import Express from '../icons/Express.astro';
import { translations, type Lang } from '../i18n/translations';

interface Props {
  lang: Lang;
}

const { lang } = Astro.props;
const t = translations[lang].section3;

const iconComponents = {
  React,
  Photoshop,
  Premier,
  Dmax,
  Aftere,
  Spoti,
  HTM5,
  Javasci,
  Cs3,
  Unity,
  Cc,
  Mongoo,
  Nodee,
  Express
} as const;

type IconKey = keyof typeof iconComponents;
const modalData = t.modalProjects;
const modalStrings = t.modal;
---        
        <section id="section3" class="section3" aria-labelledby="projects-title">
				<h1 id="projects-title" class="title-section2">{t.title}</h1>
				<div class="container-grid" role="list">
					{t.cards.map((card) => (
						<article
              role="listitem"
              tabindex="0"
              aria-label={card.ariaLabel}
              data-project={card.key}
            >
							<div>
							<h4>{card.title}</h4>
							<p>{card.description}
							</p>
						</div>
						<div class="card-icons" aria-label={card.ariaTech}>
              {card.icons.map((icon) => {
                const IconComponent = iconComponents[icon as IconKey];
                return IconComponent ? <IconComponent /> : null;
              })}
            </div>
						
				</article>
					))}
				</div>

			</section>

<!-- Modal/Popup Structure -->
<div id="project-modal" class="modal" aria-hidden="true">
  <div class="modal-content">
    <div class="modal-header">
      <h2 id="modal-title"></h2>
      <button class="modal-close" aria-label="Close modal">&times;</button>
    </div>
    <div class="modal-body">
      <div id="modal-content-container"></div>
    </div>
  </div>
</div>

<script define:vars={{ modalData, modalStrings }}>
document.addEventListener('DOMContentLoaded', () => {
  const modal = document.getElementById('project-modal');
  const modalTitle = document.getElementById('modal-title');
  const modalContentContainer = document.getElementById('modal-content-container');
  const closeBtn = document.querySelector('.modal-close');
  const projectCards = document.querySelectorAll('#section3 [data-project]');

  if (!modal || !modalTitle || !modalContentContainer || !closeBtn) {
    console.error('Modal elements not found');
    return;
  }

  const projectData = modalData;
  const strings = modalStrings;

  // Function to create modal content based on project type
  function createModalContent(project) {
    const data = projectData[project];
    if (!data) return '';

    let content = `<p class="modal-description">${data.description}</p>`;

    switch (data.type) {
      case 'video':
        if (data.content) {
          content += `
            <div class="video-container">
              <video controls preload="none" poster="${data.content.replace('.mp4', '.jpg')}">
                <source src="${data.content}" type="video/mp4">
                ${strings.browserNotSupported}
              </video>
            </div>
          `;
        }
        break;

      case 'image':
        if (data.content) {
          content += `
            <div class="image-container">
              <img src="${data.content}" alt="${data.title}" loading="lazy">
            </div>
          `;
        }
        break;

      case 'link':
        if (data.link) {
          content += `
            <div class="link-container">
              <a href="${data.link}" target="_blank" rel="noopener noreferrer" class="project-link">
                <span>${strings.visitProject}</span>
                <svg width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                  <path fill-rule="evenodd" d="M8.636 3.5a.5.5 0 0 0-.5-.5H1.5A1.5 1.5 0 0 0 0 4.5v10A1.5 1.5 0 0 0 1.5 16h10a1.5 1.5 0 0 0 1.5-1.5V7.864a.5.5 0 0 0-1 0V14.5a.5.5 0 0 1-.5.5h-10a.5.5 0 0 1-.5-.5v-10a.5.5 0 0 1 .5-.5h6.636a.5.5 0 0 0 .5-.5z"/>
                  <path fill-rule="evenodd" d="M16 .5a.5.5 0 0 0-.5-.5h-5a.5.5 0 0 0 0 1h3.793L6.146 9.146a.5.5 0 1 0 .708.708L15 1.707V5.5a.5.5 0 0 0 1 0v-5z"/>
                </svg>
              </a>
            </div>
          `;
        }
        break;

      case 'video-youtube':
        if (data.youtubeId) {
          content += `
            <div class="youtube-container">
              <iframe src="https://www.youtube.com/embed/${data.youtubeId}" 
                      width="560" height="315" 
                      frameborder="0" 
                      allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" 
                      allowfullscreen
                      loading="lazy">
              </iframe>
            </div>
          `;
        }
        break;

      case 'special': // For Unealia
        if (data.vimeoId && data.downloadLink) {
          content += `
            <div class="special-container">
              <div class="vimeo-container">
                <iframe src="https://player.vimeo.com/video/${data.vimeoId}" 
                        width="640" height="360" 
                        frameborder="0" 
                        allow="autoplay; fullscreen; picture-in-picture" 
                        allowfullscreen
                        loading="lazy">
                </iframe>
              </div>
              <div class="download-section">
                <a href="${data.downloadLink}" target="_blank" rel="noopener noreferrer" class="download-link">
                  <svg width="20" height="20" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M.5 9.9a.5.5 0 0 1 .5.5v2.5a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-2.5a.5.5 0 0 1 1 0v2.5a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2v-2.5a.5.5 0 0 1 .5-.5z"/>
                    <path d="M7.646 11.854a.5.5 0 0 0 .708 0l3-3a.5.5 0 0 0-.708-.708L8.5 10.293V1.5a.5.5 0 0 0-1 0v8.793L5.354 8.146a.5.5 0 1 0-.708.708l3 3z"/>
                  </svg>
                  ${strings.downloadGame}
                </a>
              </div>
            </div>
          `;
        }
        break;
    }

    return content;
  }

  // Add click handlers to project cards
  projectCards.forEach((card) => {
    card.addEventListener('click', (e) => {
      e.preventDefault();
      const projectId = card.dataset.project;
      if (!projectId) return;
      
      const data = projectData[projectId];
      
      if (data) {
        modalTitle.textContent = data.title;
        modalContentContainer.innerHTML = createModalContent(projectId);
        modal.classList.add('show');
        modal.setAttribute('aria-hidden', 'false');
        document.body.style.overflow = 'hidden'; // Prevent scrolling
      }
    });

    // Add keyboard support
    card.addEventListener('keydown', (e) => {
      if (e.key === 'Enter' || e.key === ' ') {
        e.preventDefault();
        card.click();
      }
    });
  });

  // Close modal handlers
  function closeModal() {
    if (!modal || !modalContentContainer) return;
    
    modal.classList.remove('show');
    modal.setAttribute('aria-hidden', 'true');
    document.body.style.overflow = ''; // Restore scrolling
    
    // Stop any playing videos
    const videos = modalContentContainer.querySelectorAll('video');
    videos.forEach((video) => {
      video.pause();
      video.currentTime = 0;
    });
  }

  closeBtn.addEventListener('click', closeModal);

  // Close on escape key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && modal.classList.contains('show')) {
      closeModal();
    }
  });

  // Close on backdrop click
  modal.addEventListener('click', (e) => {
    if (e.target === modal) {
      closeModal();
    }
  });
});
</script>

<style>
/* Responsive Design for Modal */
@media (max-width: 768px) {
  .modal-content {
    width: 95vw !important;
    max-height: 95vh !important;
    margin: 10px !important;
  }

  .modal-header {
    padding: 15px 20px !important;
  }

  .modal-header h2 {
    font-size: 20px !important;
  }

  .modal-body {
    padding: 20px !important;
  }

  .modal-description {
    font-size: 14px !important;
  }

  .vimeo-container {
    padding-bottom: 75% !important; /* Adjust for mobile */
  }
}

@media (max-width: 480px) {
  .modal-header h2 {
    font-size: 18px !important;
  }

  .modal-body {
    padding: 15px !important;
  }

  .project-link,
  .download-link {
    padding: 10px 20px !important;
    font-size: 14px !important;
  }
}

/* Enhance existing project cards for better interaction */
.container-grid article {
  cursor: pointer !important;
  position: relative !important;
}

.container-grid article::after {
  content: '' !important;
  position: absolute !important;
  top: 0 !important;
  left: 0 !important;
  right: 0 !important;
  bottom: 0 !important;
  background: linear-gradient(45deg, transparent, rgba(8, 203, 213, 0.1)) !important;
  opacity: 0 !important;
  transition: opacity 0.3s ease !important;
  pointer-events: none !important;
}

.container-grid article:hover::after {
  opacity: 1 !important;
}

.container-grid article:focus {
  outline: 2px solid var(--blue) !important;
  outline-offset: 2px !important;
}
</style>
