---
// Cargar variables de entorno en el servidor y pasarlas al cliente
const emailConfig = {
  serviceId: import.meta.env.VITE_EMAILJS_SERVICE_ID ,
  templateId: import.meta.env.VITE_EMAILJS_TEMPLATE_ID ,
  publicKey: import.meta.env.VITE_EMAILJS_PUBLIC_KEY ,
  contactEmail: import.meta.env.VITE_CONTACT_EMAIL 
};
---

<section id="section4" class="section4" aria-labelledby="contact-title">
  <h1 id="contact-title" class="title-section2">CONTACT</h1>
  
  <!-- Botones de contacto directo -->
  <div class="contact-buttons">
    <a href="https://wa.me/34672015046" target="_blank" rel="noopener noreferrer" class="contact-btn whatsapp-btn">
      <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
        <path d="M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.890-5.335 11.893-11.893A11.821 11.821 0 0020.465 3.488"/>
      </svg>
      WhatsApp
    </a>
    
    <a href="tel:+34672015046" class="contact-btn phone-btn">
      <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"></path>
      </svg>
      Call Me
    </a>
  </div>

  <div class="separator">
    <span class="separator-text">or send a message</span>
  </div>

  <form id="contactForm" class="contact-form">
    <div class="form-row">
      <div class="form-group">
        <label for="nombre" class="form-label">Name</label>
        <input
          type="text"
          id="nombre"
          name="nombre"
          required
          aria-required="true"
        />
      </div>
      
      <div class="form-group">
        <label for="email" class="form-label">Email</label>
        <input
          type="text"
          id="email"
          name="email"
          required
          aria-required="true"
        />
      </div>
    </div>

    <div class="form-group">
      <label for="asunto" class="form-label">Subject</label>
        <input
          type="text"
          id="asunto"
          name="asunto"
          required
          aria-required="true"
        />
    </div>
    
    <div class="form-group">
      <label for="mensaje" class="form-label">Message</label>
      <textarea
        id="mensaje"
        name="mensaje"
        rows="5"
        required
        aria-required="true"
      ></textarea>
    </div>
    
    <div id="form-message" class="form-message" aria-live="polite"></div>
    
    <button type="submit" class="submit-button">Send Message</button>
  </form>
</section>

<script define:vars={{ emailConfig }}>
  // Load EmailJS from CDN instead of import
  const loadEmailJS = async () => {
    if (window.emailjs) return window.emailjs;
    
    // Load EmailJS from CDN
    const script = document.createElement('script');
    script.src = 'https://cdn.jsdelivr.net/npm/@emailjs/browser@4/dist/email.min.js';
    document.head.appendChild(script);
    
    return new Promise((resolve) => {
      script.onload = () => resolve(window.emailjs);
    });
  };

  // Configuración desde el servidor (variables de entorno procesadas)
  const CONFIG = {
    serviceId: emailConfig.serviceId,
    templateId: emailConfig.templateId,
    publicKey: emailConfig.publicKey,
    contactEmail: emailConfig.contactEmail
  };

  // Debug: Log configuration
  console.log('EmailJS Config:', {
    serviceId: CONFIG.serviceId,
    templateId: CONFIG.templateId,
    publicKey: CONFIG.publicKey ? 'SET' : 'MISSING',
    contactEmail: CONFIG.contactEmail
  });

  // Initialize all functionality when DOM is ready
  document.addEventListener('DOMContentLoaded', async () => {
    // Load EmailJS first
    const emailjs = await loadEmailJS();
    // Parallax scrolling effect for the hero section with optimization
    const contenedor = document.querySelector('.section1');
    const scrollFactor = 0.1;
    let ticking = false;
    let lastScrollY = window.scrollY;

    if (contenedor) {
      // Set initial background size
      contenedor.style.backgroundSize = 'auto 180%';
      
      // Optimized scroll handler using requestAnimationFrame
      window.addEventListener('scroll', () => {
        lastScrollY = window.scrollY;
        
        if (!ticking) {
          window.requestAnimationFrame(() => {
            // Only update if we've scrolled enough to make a visible difference
            const backgroundWidth = 180 + lastScrollY * scrollFactor;
            const backgroundSize = 'auto ' + backgroundWidth + '%';
            contenedor.style.backgroundSize = backgroundSize;
            ticking = false;
          });
          
          ticking = true;
        }
      });
    }

    // Project grid click handling
    const container = document.querySelector('.container-grid');
    if (container) {
      const articles = container.querySelectorAll('article');

      articles.forEach((article, index) => {
        article.addEventListener('click', function() {
          let url;
          switch (index + 1) {
            case 1:
              url = 'https://citmalumnes.upc.es/~victordr/videos/hoopling.mp4';
              break;
            case 2:
              url = 'https://victordoru.itch.io/unealia';
              break;
            // Add other cases as needed
            default:
              return;
          }
          if (url) {
            window.open(url, '_blank');
          }
        });
      });
    }

    // EmailJS Form Handling
    const form = document.getElementById('contactForm');
    const formMessage = document.getElementById('form-message');
    const submitButton = document.querySelector('.submit-button');
    
    if (form && formMessage && submitButton) {
      form.addEventListener('submit', async (event) => {
        event.preventDefault();
        
        try {
          const formData = new FormData(form);
          
          // Deshabilitar botón y mostrar estado de carga
          submitButton.disabled = true;
          submitButton.textContent = 'SENDING...';
          formMessage.textContent = 'Sending your message...';
          formMessage.className = 'form-message info';
          
          // Preparar parámetros para EmailJS
          const templateParams = {
            from_name: formData.get('nombre'),
            from_email: formData.get('email'),
            subject: formData.get('asunto'),
            message: formData.get('mensaje'),
            to_name: 'Víctor Doru',
            to_email: CONFIG.contactEmail,
          };

          console.log('Sending email with params:', templateParams);
          console.log('Service ID:', CONFIG.serviceId);
          console.log('Template ID:', CONFIG.templateId);
          console.log('Public Key:', CONFIG.publicKey);
          
          // Enviar email usando EmailJS
          const result = await emailjs.send(
            CONFIG.serviceId, 
            CONFIG.templateId, 
            templateParams, 
            CONFIG.publicKey
          );
          
          console.log('EmailJS Success:', result);
          
          // Éxito
          formMessage.textContent = 'Message sent! I will get back to soon!';
          formMessage.className = 'form-message success';
          form.reset();
          
          // Hacer que el mensaje desaparezca después de 5 segundos
          setTimeout(() => {
            formMessage.style.opacity = '0';
            formMessage.style.transition = 'opacity 0.5s ease';
            setTimeout(() => {
              formMessage.style.display = 'none';
              formMessage.style.opacity = '1'; // Resetear para próximos usos
            }, 500);
          }, 5000);
          
        } catch (error) {
          console.error('EmailJS Error:', error);
          
          // Error
          formMessage.textContent = 'Oops! Something went wrong. Please try again or contact me directly at victordoru96@gmail.com';
          formMessage.className = 'form-message error';
        } finally {
          // Rehabilitar botón
          submitButton.disabled = false;
          submitButton.textContent = 'SEND MESSAGE';
        }
      });
    }
  });
</script>

<style>
/* Botones de contacto directo */
.contact-buttons {
  display: flex;
  justify-content: center;
  gap: 20px;
  margin: 40px 0;
}

.contact-btn {
  display: flex;
  align-items: center;
  gap: 10px;
  padding: 15px 25px;
  border-radius: 8px;
  text-decoration: none;
  font-weight: 500;
  font-size: 16px;
  transition: all 0.3s ease;
  background: transparent;
  border: 1px solid;
}

.whatsapp-btn {
  color: #25D366;
  border-color: #25D366;
}

.whatsapp-btn:hover {
  background-color: #25D366;
  color: white;
  transform: translateY(-2px);
  box-shadow: 0 5px 15px rgba(37, 211, 102, 0.3);
}

.phone-btn {
  color: var(--blue);
  border-color: var(--blue);
}

.phone-btn:hover {
  background-color: var(--blue);
  color: white;
  transform: translateY(-2px);
  box-shadow: 0 5px 15px rgba(8, 203, 213, 0.3);
}

/* Separador elegante */
.separator {
  display: flex;
  align-items: center;
  margin: 50px 0;
  text-align: center;
}

.separator::before,
.separator::after {
  content: '';
  flex: 1;
  height: 1px;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
}

.separator-text {
  color: rgba(255, 255, 255, 0.7);
  font-size: 14px;
  font-weight: 500;
  text-transform: uppercase;
  letter-spacing: 1px;
  padding: 0 20px;
  background: rgba(255, 255, 255, 0.05);
  border-radius: 20px;
  padding: 8px 20px;
  backdrop-filter: blur(10px);
  border: 1px solid rgba(255, 255, 255, 0.1);
}

/* Formulario mejorado */
.contact-form {
  max-width: 600px;
  margin: 0 auto;
  padding: 40px;
}

.form-row {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 20px;
  margin-bottom: 20px;
}

.form-group {
  display: flex;
  flex-direction: column;
  gap: 8px;
  margin-bottom: 20px;
}

.form-label {
  color: rgba(255, 255, 255, 0.9);
  font-size: 14px;
  font-weight: 500;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.form-textarea {
  min-height: 120px;
  resize: vertical;
}

.submit-button {
  background: linear-gradient(135deg, var(--blue), var(--blue-dark));
  border: none;
  border-radius: 8px;
  padding: 16px 32px;
  color: white;
  font-size: 16px;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 1px;
  cursor: pointer;
  transition: all 0.3s ease;
  width: 100%;
}

.submit-button:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 20px rgba(8, 203, 213, 0.4);
}

.submit-button:active {
  transform: translateY(0);
}

.submit-button:disabled {
  opacity: 0.6;
  cursor: not-allowed;
  transform: none;
  box-shadow: none;
}

/* Mensajes del formulario */
.form-message {
  margin: 20px 0;
  padding: 12px 16px;
  border-radius: 8px;
  font-weight: 500;
  display: none;
  text-align: center;
}

.form-message.info {
  display: block;
  background-color: rgba(33, 150, 243, 0.1);
  border: 1px solid rgba(33, 150, 243, 0.3);
  color: #2196F3;
}

.form-message.success {
  display: block;
  background-color: rgba(76, 175, 80, 0.1);
  border: 1px solid rgba(76, 175, 80, 0.3);
  color: #4CAF50;
}

.form-message.error {
  display: block;
  background-color: rgba(244, 67, 54, 0.1);
  border: 1px solid rgba(244, 67, 54, 0.3);
  color: #F44336;
}

/* Responsive para botones */
@media (max-width: 768px) {
  .contact-buttons {
    flex-direction: column;
    align-items: center;
    gap: 15px;
  }
  
  .contact-btn {
    width: 200px;
    justify-content: center;
  }
  
  .contact-form {
    padding: 30px 20px;
  }
  
  .form-row {
    grid-template-columns: 1fr;
    gap: 15px;
  }
}

@media (max-width: 480px) {
  .contact-btn {
    width: 180px;
    padding: 12px 20px;
    font-size: 14px;
  }
  
  .contact-form {
    padding: 25px 15px;
  }
  
  .submit-button {
    padding: 14px 28px;
    font-size: 14px;
  }
}
</style>
